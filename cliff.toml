# https://git-cliff.org/docs/configuration

[changelog]
trim = true
output = "CHANGELOG.md"
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}

    {%- for commit in commits %}
        -  {% if commit.breaking %}**BREAKING CHANGE**: {% endif %}\
            {% if commit.scope %}(*{{ commit.scope }}*): {% endif %}\
            {{ commit.message | split(pat="\n") | first | upper_first | trim }} \
            ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
            {% set breaking_change = commit.footers | filter(attribute="breaking", value=true) | first %}\
            {% if breaking_change %}\
                :  
                {{ breaking_change.value | trim }}
            {% endif %}\
    {% endfor %}

{% endfor %}
"""
footer = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                {{ self::remote_url() }}/compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: {{ self::remote_url() }}/compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""


[git]
conventional_commits = true
filter_unconventional = true
split_commits = false
commit_parsers = [
  { message = "^feat", group = "Added" },
  { message = "^fix", group = "Fixed" },
  { message = "^perf", group = "Fixed" },
  { message = "^.*: remove", group = "Removed" },
  { message = "^refactor\\(tests\\)", skip = true },
  { message = "^refactor", group = "Changed" },
  { message = "^revert", group = "Changed" },
  { message = "^style", skip = true },
  { message = "^chore", skip = true },
  { message = "^test", skip = true },
  { body = ".*security", group = "Security" },
]
filter_commits = true
protect_breaking_commits = true
topo_order = false
sort_commits = "oldest"
